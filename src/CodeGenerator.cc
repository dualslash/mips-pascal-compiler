/*
 * CodeGenerator.cc
 */

#include "CodeGenerator.h"


bool IsGlobal(Symbol * sym);


//////////////////////////////////////
//    CodeGenerator()               //
//  Initialize code generator       //
//  for code base, stack frame and  //
//  register to generate assembly   //
//////////////////////////////////////

CodeGenerator::CodeGenerator()
: mips(), stackframe(mips), magister(stackframe, mips) {}

CodeGenerator::~CodeGenerator() {}


//////////////////////////////////////
//    GenerateHeader(-)             //
//  Generates header for the        //
//  assembly output file            //
//////////////////////////////////////

void CodeGenerator::GenerateHeader(FILE * out) 
{
	fprintf(out, "################################\n");
  fprintf(out, "## Output generated by ./comp ##\n");
  fprintf(out, "##   Subset Pascal Compiler   ##\n");
  fprintf(out, "##   By Ruduan Plug @ LIACS   ##\n");
  fprintf(out, "################################\n");
  fprintf(out, "\n");
}

//////////////////////////////////////
//    GenerateGlobalDecls(--)       //
//  Generates the declarations for  //
//  the global variables and main   //
//  function                        //
//////////////////////////////////////

void CodeGenerator::GenerateGlobalDecls(FILE *, SymbolTable * symtab, IntermediateCode * inputCode) 
{
	string label;
	int std = 4;
	label = "main";

  mips.Push(new MStatement(MOP_DATA));
  mips.Push(new MStatement(MOP_ALIGN, 
  					new MOperand(MT_INT, std)));

  for(int i = 0; i < (int)symtab->GetRootScope()->GetNumberOfSymbols(); i++) 
  {
    if(IsGlobal(symtab->GetRootScope()->GetSymbol(i))) 
    {
    	  mips.Push(new MStatement(MOP_LABEL,
  								string(SYMBOL_PREFIX) + symtab->GetRootScope()->GetSymbol(i)->GetName())); 
  										   
		    if(symtab->GetRootScope()->GetSymbol(i)->GetReturnType() == RT_INT) 
		    	mips.Push(new MStatement(MOP_WORD,
		      					new MOperand(MT_INT, 0)));
		    else 
		    	mips.Push(new MStatement(MOP_FLOAT, 
		      					new MOperand(MT_REAL, 0.0f)));
    }
  }
  
  mips.Push(new MStatement(MOP_TEXT));
  
  mips.Push(new MStatement(MOP_ALIGN, 
  				  new MOperand(MT_INT, std)));
  				  
  mips.Push(new MStatement(MOP_GLOBL, 
  					new MOperand(MT_LABEL, label)));
  					
  mips.Push(new MStatement(MOP_ENT, 
  					new MOperand(MT_LABEL, label)));
  					
  mips.Push(new MStatement(MOP_LABEL, label));
  
  mips.Push(Offset(-std));
  
  mips.Push(new MStatement(MOP_JAL, 
  					new MOperand(MT_LABEL, string(SYMBOL_PREFIX) + inputCode->GetProgramName())));
  					
  mips.Push(Offset(std));
  
  mips.Push(new MStatement(MOP_ADDI, 
  					new MOperand(MT_REGISTER, R_V0), 
  					new MOperand(MT_REGISTER, R_ZERO), 
  					new MOperand(MT_INT, 10)));
  					
  mips.Push(new MStatement(MOP_SYSCALL));
  
  mips.Push(new MStatement(MOP_END, new MOperand(MT_LABEL, label)));
}

//////////////////////////////////////
//    GenerateCode(---)             //
//  Takes an IntermediateCode       //
//  object and emits MIPS assembly  //
//  instructions using the MIPS     //
//  code base                       //
//////////////////////////////////////

void CodeGenerator::GenerateCode(FILE *out, SymbolTable * symtab, IntermediateCode * inputCode) 
{
  for(int i = 0; i < (int)inputCode->GetStatementCount(); i++) 
		MGenerator(out, symtab, inputCode, inputCode->GetStatement(i));
}

//////////////////////////////////////
//    GenerateCode(-)               //
//  Generates a trailer output with //
//  base functions that are used    //
//  for the system calls            //
//////////////////////////////////////

void CodeGenerator::GenerateTrailer(FILE *) 
{
	string label;
	label = "readinteger";

  mips.Push(new MStatement(MOP_ENT,
          	new MOperand(MT_LABEL, string(SYMBOL_PREFIX) + label)));
 
  mips.Push(new MStatement(MOP_LABEL,
						string(SYMBOL_PREFIX) + label)); 

  mips.Push(new MStatement(MOP_ADDI,
          	new MOperand(MT_REGISTER, R_V0),
          	new MOperand(MT_REGISTER, R_ZERO),
          	new MOperand(MT_INT, 5)));

  mips.Push(new MStatement(MOP_SYSCALL));

  mips.Push(new MStatement(MOP_JR,
          	new MOperand(MT_REGISTER, R_RA)));

  mips.Push(new MStatement(MOP_END,
          	new MOperand(MT_LABEL, string(SYMBOL_PREFIX) + label)));

	label = "readreal";

  mips.Push(new MStatement(MOP_ENT,
          	new MOperand(MT_LABEL, string(SYMBOL_PREFIX) + label)));

  mips.Push(new MStatement(MOP_LABEL,
						string(SYMBOL_PREFIX) + label)); 

  mips.Push(new MStatement(MOP_ADDI,
          	new MOperand(MT_REGISTER, R_V0),
          	new MOperand(MT_REGISTER, R_ZERO),
          	new MOperand(MT_INT, 6)));

  mips.Push(new MStatement(MOP_SYSCALL));

  mips.Push(new MStatement(MOP_JR,
          	new MOperand(MT_REGISTER, R_RA)));

  mips.Push(new MStatement(MOP_END,
          	new MOperand(MT_LABEL, string(SYMBOL_PREFIX) + label)));

	label = "writeinteger";

  mips.Push(new MStatement(MOP_ENT,
        		new MOperand(MT_LABEL, string(SYMBOL_PREFIX) + label)));
      
  mips.Push(new MStatement(MOP_LABEL,
						string(SYMBOL_PREFIX) + label)); 

  mips.Push(new MStatement(MOP_LW,
          	new MOperand(MT_REGISTER, R_A0),
          	new MOperand(MT_OFFSET, R_SP, 4)));

  mips.Push(new MStatement(MOP_ADDI,
          	new MOperand(MT_REGISTER, R_V0),
          	new MOperand(MT_REGISTER, R_ZERO),
          	new MOperand(MT_INT, 1)));

  mips.Push(new MStatement(MOP_SYSCALL));

  mips.Push(Offset(4));

  mips.Push(new MStatement(MOP_JR,
          	new MOperand(MT_REGISTER, R_RA)));

  mips.Push(new MStatement(MOP_END,
          	new MOperand(MT_LABEL, string(SYMBOL_PREFIX) + label)));

	label = "writereal";

  mips.Push(new MStatement(MOP_ENT,
        		new MOperand(MT_LABEL, string(SYMBOL_PREFIX) + label)));

  mips.Push(new MStatement(MOP_LABEL,
						string(SYMBOL_PREFIX) + label)); 

  mips.Push(new MStatement(MOP_L_S,
          	new MOperand(MT_REGISTER, R_F12),
          	new MOperand(MT_OFFSET, R_SP, 4)));

  mips.Push(new MStatement(MOP_ADDI,
          	new MOperand(MT_REGISTER, R_V0),
          	new MOperand(MT_REGISTER, R_ZERO),
          	new MOperand(MT_INT, 2)));

  mips.Push(new MStatement(MOP_SYSCALL));

  mips.Push(Offset(4));

  mips.Push(new MStatement(MOP_JR,
          	new MOperand(MT_REGISTER, R_RA)));

  mips.Push(new MStatement(MOP_END,
          	new MOperand(MT_LABEL, string(SYMBOL_PREFIX) + label)));
}

//////////////////////////////////////
//    Write(-)                      //
//  Writes the generated MIPS       //
//  instruction depository to the   //
//  output file                     //
//////////////////////////////////////

void CodeGenerator::Write(FILE * out) 
{
  mips.Output(out);
  fprintf(out,"\n");
}
